{"mappings":"goBAAA,IAAAA,EAAAC,EAAA,SAMA,MAAMC,EAAqB,CAAC,EAC5BC,QAAQC,IAAI,SAgCZ,SAASC,EAAQC,GACb,IAAK,MAAMC,KAAOD,EACd,GAAIE,OAAOC,UAAUC,eAAeH,GACpC,OAAO,EAEX,OAAO,CACX,CApCmBI,SAASC,cAAc,QAC3BC,iBAAiB,UAAUC,IAClCA,EAAEC,iBACFJ,SAASK,iBAAiB,SAASC,SAAQC,IACnB,OAAhBA,EAAMC,OAAkC,KAAhBD,EAAMC,QAC9BjB,EAAQgB,EAAME,MAAQF,EAAMC,OAQ5CE,eAA4BC,GACxB,MAAMC,QAA0B,EAAAvB,EAAAwB,cAAaF,GACxCjB,EAAQkB,IAITpB,QAAQC,IAAI,cACZqB,aAAaC,QAAQ,OAAQC,KAAKC,UAAUpB,OAAOqB,OAAON,KAG1DO,YAAW,KACPC,SAASC,OAAO,yBACjB,MARH7B,QAAQC,IAAI,QAUpB,CApBY6B,CAAa/B,IACN,IACX,G,sCChBRmB,eAAea,EAAaZ,GACxB,MAAMa,QAAcC,IAEpB,OADAjC,QAAQC,IAAI+B,GAkDhB,SAAsBA,EAAmBb,GACrC,IAAIe,EAAY,CAAC,EAGjB,GADAlC,QAAQC,IAAI,cACE,OAAV+B,EACA,IAAK,MAAMG,KAAQH,EACXG,EAAK,WAAgBhB,EAAQ,UAAegB,EAAK,WAAgBhB,EAAQ,WACzEnB,QAAQC,IAAI,eACZiC,EAAYC,EACZnC,QAAQC,IAAIiC,SAKpBlC,QAAQC,IAAI,kBAEhB,OAAOiC,CACX,CAlEWE,CAAaJ,EAAOb,EAC/B,CAIAD,eAAee,IACX,MACMI,QAAiBC,MADH,sFAGpB,aADoBD,EAASE,MAEjC,CAGArB,eAAesB,EAAaL,GACxB,MAAMM,QAAiBR,IACvB,IAAK,IAAIS,EAAY,EAAGA,EAAID,EAASE,OAAQD,IACzC,QAAaE,IAATT,GAAsBM,EAASC,GAAGG,WAAaV,EAAKW,eAAiBL,EAASC,GAAGK,WAAaZ,EAAKa,cACnG,OAAON,CAGnB,CAEAxB,eAAe+B,EAAeC,GAC1BlD,QAAQC,IAAIiD,GACZ,MAAMC,EAAU,iFAAiFD,eAC3Fb,QAAiBC,MAAMa,GACvBC,QAAcf,EAASE,OAE7B,OADAvC,QAAQC,IAAImD,GACLA,CACX,CAEAlC,eAAemC,EAAaC,EAAmBF,GAC3C,MAAMG,EAAM,iFAAiFD,eACvFE,EAAO,CACTC,OAAQ,MACRC,KAAMlC,KAAKC,UAAU2B,GACrBO,QAAS,CACL,eAAgB,oCAKlBC,SADiBtB,MAAMiB,EAAKC,IACZjB,OACtBvC,QAAQC,IAAI2D,EAChB,CAyBA1C,eAAe2C,EAAY1C,GACvB,MAAMa,QAAcC,IACpB,IAAIiB,EAAgB,EACN,OAAVlB,IACAkB,EAAQlB,EAAMW,QAGlB,MAAMY,EAAc,iFAAiFL,SAC/FM,EAAO,CACTC,OAAQ,MACRC,KAAMlC,KAAKC,UAAUN,GACrBwC,QAAS,CACL,eAAgB,oCAKlBC,SADiBtB,MAAMiB,EAAKC,IACZjB,OACtBvC,QAAQC,IAAI2D,EAChB,C","sources":["src/index.ts","src/modules/firebase.ts"],"sourcesContent":["import { findUserInDb } from \"./modules/firebase\";\r\n\r\ntype UserInput = {\r\n    [key: string]: string;\r\n}\r\n\r\nconst userObj: UserInput = {};\r\nconsole.log('Start');\r\n//Get userinputs from register-form\r\nconst signInForm = document.querySelector('form') as HTMLFormElement;\r\n    signInForm.addEventListener('submit', e => {\r\n        e.preventDefault();\r\n        document.querySelectorAll('input').forEach(input => {\r\n            if (input.value !== null && input.value !== '') {\r\n                userObj[input.name] = input.value;\r\n            }\r\n            logInHandler(userObj);\r\n            return false;\r\n        });\r\n    });\r\n\r\n//Check if user exists in db\r\nasync function logInHandler(userObj: UserInput) {\r\n    const foundUser: Object = await findUserInDb(userObj);\r\n    if (!isEmpty(foundUser)) {\r\n        //Prompt message to user\r\n        console.log('Error');\r\n    } else {\r\n        console.log('Logging in');\r\n        localStorage.setItem('user', JSON.stringify(Object.values(foundUser)));\r\n\r\n        //Add animation? \r\n        setTimeout(() => {\r\n            location.assign(\"./html/profile.html\");\r\n        }, 1000);\r\n    }\r\n}\r\n\r\n//Checks if an object is empty\r\nfunction isEmpty(obj: Object): boolean {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty(key)) \r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nexport {isEmpty};","import { User } from \"./User\";\r\n\r\nasync function findUserInDb(userObj: UserInput): Promise<boolean | Object> {\r\n    const users = await getAllUsers();\r\n    console.log(users);\r\n    return validateUser(users, userObj);\r\n}\r\n\r\n\r\n//Fetch users from firebase\r\nasync function getAllUsers(): Promise<UserInfo[]> {\r\n    const url: string = 'https://js2-social-media-default-rtdb.europe-west1.firebasedatabase.app/users.json';\r\n    const response = await fetch(url);\r\n    const users = await response.json();\r\n    return users;\r\n}\r\n\r\n\r\nasync function getUserIndex(user: User): Promise<any> {\r\n    const allUsers = await getAllUsers();\r\n    for (let i: number = 0; i < allUsers.length; i++) {\r\n        if (user !== undefined && allUsers[i].userName === user.getUserName() && allUsers[i].password === user.getPassword()) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n\r\nasync function getPostsFromDb(index: number): Promise<Post[]>{\r\n    console.log(index);\r\n    const postUrl = `https://js2-social-media-default-rtdb.europe-west1.firebasedatabase.app/users/${index}/posts.json`;\r\n    const response = await fetch(postUrl);\r\n    const posts = await response.json();\r\n    console.log(posts);\r\n    return posts;\r\n}\r\n\r\nasync function addPostsToDb(userIndex: number, posts: Post[]){\r\n    const url = `https://js2-social-media-default-rtdb.europe-west1.firebasedatabase.app/users/${userIndex}/posts.json`;\r\n    const init = {\r\n        method: 'PUT',\r\n        body: JSON.stringify(posts),\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\"\r\n        }\r\n    }\r\n\r\n    const response = await fetch(url, init);\r\n    const data = response.json();\r\n    console.log(data);\r\n}\r\n\r\n\r\n//Checks if the new users password and email matches an registered users email and password\r\n//Return true if its a match\r\nfunction validateUser(users: UserInfo[], userObj: UserInput): Object {\r\n    let userFound = {};\r\n\r\n    console.log('VALIDATION');\r\n    if (users !== null) {\r\n        for (const user of users) {\r\n            if (user[\"userName\"] === userObj[\"userName\"] && user[\"password\"] === userObj[\"password\"]) {\r\n                console.log('User found!');\r\n                userFound = user;\r\n                console.log(userFound);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        console.log('user not found');\r\n    }\r\n    return userFound;\r\n}\r\n\r\n\r\nasync function addUserToDb(userObj: UserInput) {\r\n    const users = await getAllUsers();\r\n    let index: number = 0;\r\n    if (users !== null) {\r\n        index = users.length;\r\n    }\r\n\r\n    const url: string = `https://js2-social-media-default-rtdb.europe-west1.firebasedatabase.app/users/${index}.json`;\r\n    const init = {\r\n        method: 'PUT',\r\n        body: JSON.stringify(userObj),\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\"\r\n        }\r\n    }\r\n\r\n    const response = await fetch(url, init);\r\n    const data = response.json();\r\n    console.log(data);\r\n}\r\n\r\n\r\nexport { findUserInDb, addUserToDb, getAllUsers, getUserIndex, getPostsFromDb, addPostsToDb };"],"names":["$k8Jq9","parcelRequire","$b4e14b6b8da86996$var$userObj","console","log","$b4e14b6b8da86996$export$dd1bc94b04021eeb","obj","key","Object","prototype","hasOwnProperty","document","querySelector","addEventListener","e","preventDefault","querySelectorAll","forEach","input","value","name","async","userObj","foundUser","findUserInDb","localStorage","setItem","JSON","stringify","values","setTimeout","location","assign","$b4e14b6b8da86996$var$logInHandler","$14f6629ccf7de9b8$export$31fab651fc2b928c","users","$14f6629ccf7de9b8$export$69093b9c569a5b5b","userFound","user","$14f6629ccf7de9b8$var$validateUser","response","fetch","json","$14f6629ccf7de9b8$export$ded32174b9143525","allUsers","i","length","undefined","userName","getUserName","password","getPassword","$14f6629ccf7de9b8$export$8a0e46d082bde07","index","postUrl","posts","$14f6629ccf7de9b8$export$e49f2def56dbb152","userIndex","url","init","method","body","headers","data","$14f6629ccf7de9b8$export$e13b0b8487db8de"],"version":3,"file":"index.78a589f3.js.map"}