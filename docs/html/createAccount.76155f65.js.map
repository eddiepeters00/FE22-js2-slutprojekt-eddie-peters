{"mappings":"AAAO,MAAMA,EACTC,YACqBC,EACAC,EACAC,EACAC,EACAC,EAAkB,CAAC,CAAC,I,UAJpBJ,E,WACAC,E,cACAC,E,YACAC,E,WACAC,CACnB,CAEFC,UACI,OAAOC,KAAKN,IAChB,CAEAO,WACI,OAAOD,KAAKL,KAChB,CAEAO,cACI,OAAOF,KAAKJ,QAChB,CAEAO,YACI,OAAOH,KAAKH,MAChB,ECZJO,eAAeC,EAAaC,GAExB,OAaJ,SAAsBC,EAAyBD,GAC3C,IAAIE,GAAqB,EAKzB,GAHAC,QAAQC,IAAI,cACZD,QAAQC,IAAI,YAAaH,GACzBE,QAAQC,IAAI,cAAeJ,GACb,OAAVC,EAAgB,CAChB,IAAK,MAAMI,KAAQJ,EACXI,EAAK,QAAaL,EAAQ,OAAYK,EAAK,WAAgBL,EAAQ,WACnEG,QAAQC,IAAI,eACZF,GAAY,GAGhBA,GAEAC,QAAQC,IAAI,4BAEpB,CACA,OAAOF,CACX,CAhCWI,OADaC,IACOP,EAC/B,CAGAF,eAAeS,IACX,MACMC,QAAiBC,MADH,sFAGpB,aADoBD,EAASE,MAEjC,CAyBAZ,eAAea,EAAYN,GACvB,MAAMJ,QAAcM,IACpB,IAAIK,EAAgB,EACN,OAAVX,IACAW,EAAQX,EAAMY,QAGlB,MAAMC,EAAc,iFAAiFF,SAC/FG,EAAO,CACTC,OAAQ,MACRC,KAAMC,KAAKC,UAAUd,GACrBe,QAAS,CACL,eAAgB,oCAKlBC,SADiBZ,MAAMK,EAAKC,IACZL,OACtBP,QAAQC,IAAIiB,EAChB,CC3DA,MAAMC,EAAqB,CAAC,EAE5BC,SAASC,iBAAiB,qBAAqBC,SAAQC,IACnDA,EAAIC,iBAAiB,SAAS,KAC1BxB,QAAQC,IAAIsB,EAAIE,eACU,OAAtBF,EAAIE,gBACJN,EAAQ,OAAYI,EAAIE,cAAa,GAE7C,IAIiBL,SAASM,cAAc,kBAC/BF,iBAAiB,UAAUG,IACpCA,EAAEC,iBACFR,SAASC,iBAAiB,SAASC,SAAQO,IACnB,OAAhBA,EAAMC,OAAkC,KAAhBD,EAAMC,QAC9BX,EAAQU,EAAM5C,MAAQ4C,EAAMC,MAAK,IAS7CnC,eAA+BE,GAE3B,SAD6BD,EAAaC,GAWtCG,QAAQC,IAAI,2BAVJ,CACR,MAAMC,EAad,SAAuBL,GACnB,MAAMK,EAAO,IAAInB,EAAKc,EAAQZ,KAAMY,EAAQX,MAAOW,EAAQV,SAAUU,EAAQT,QAE7E,OADAY,QAAQC,IAAIC,GACLA,CACX,CAjB2B6B,CAAclC,GACjCW,EAAYN,GAGZ8B,YAAW,KACPC,SAASC,QAAQ,qBAClB,IACP,CAIJ,CAnBIC,CAAgBhB,EAAA","sources":["src/modules/User.ts","src/modules/firebase.ts","src/modules/register.ts"],"sourcesContent":["export class User{\r\n    constructor(\r\n        private readonly name:string,\r\n        private readonly email:string,\r\n        private readonly password:string,\r\n        private readonly imgUrl:string,\r\n        private readonly posts: Object[] = [{}]\r\n    ){}\r\n\r\n    getName(){\r\n        return this.name;\r\n    }\r\n\r\n    getEmail(){\r\n        return this.email;\r\n    }\r\n\r\n    getPassword(){\r\n        return this.password;\r\n    }\r\n\r\n    getImgUrl(){\r\n        return this.imgUrl;\r\n    }\r\n}","import { User } from \"./User\";\r\n\r\ntype UserInput = {\r\n    [key: string]: string;\r\n};\r\n\r\ntype UserValidation = {\r\n    email: string,\r\n    password: string\r\n};\r\n\r\nasync function findUserInDb(userObj: UserInput): Promise<boolean> {\r\n    const users = await getAllUsers();\r\n    return validateUser(users, userObj);\r\n}\r\n\r\n//Fetch users from firebase\r\nasync function getAllUsers(): Promise<UserValidation[]> {\r\n    const url: string = 'https://js2-social-media-default-rtdb.europe-west1.firebasedatabase.app/users.json';\r\n    const response = await fetch(url);\r\n    const users = await response.json();\r\n    return users;\r\n}\r\n\r\n//Checks if the new users password and email matches an registered users email and password\r\n//Return true if its a match\r\nfunction validateUser(users: UserValidation[], userObj: UserInput): boolean {\r\n    let userFound: boolean = false;\r\n\r\n    console.log('VALIDATION');\r\n    console.log('ALL USERS', users);\r\n    console.log('USER OBJECT', userObj);\r\n    if (users !== null) {\r\n        for (const user of users) {\r\n            if (user[\"email\"] === userObj[\"email\"] && user[\"password\"] === userObj[\"password\"]) {\r\n                console.log('User found!');\r\n                userFound = true;\r\n            }\r\n        }\r\n        if(!userFound){\r\n            //Display error\r\n            console.log('Could not find user in db');\r\n        } \r\n    }\r\n    return userFound;\r\n}\r\n\r\nasync function addUserToDb(user: User) {\r\n    const users = await getAllUsers();\r\n    let index: number = 0;\r\n    if (users !== null) {\r\n        index = users.length;\r\n    }\r\n\r\n    const url: string = `https://js2-social-media-default-rtdb.europe-west1.firebasedatabase.app/users/${index}.json`;\r\n    const init = {\r\n        method: 'PUT',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\"\r\n        }\r\n    }\r\n\r\n    const response = await fetch(url, init);\r\n    const data = response.json();\r\n    console.log(data);\r\n}\r\n\r\nexport { findUserInDb, addUserToDb };","import { User } from \"../modules/User\";\r\nimport { findUserInDb, addUserToDb } from \"../modules/firebase\";\r\n\r\ntype UserInput = {\r\n    [key: string]: string;\r\n}\r\n\r\nconst userObj: UserInput = {};\r\n\r\ndocument.querySelectorAll('.image-select img').forEach(img => {\r\n    img.addEventListener('click', () => {\r\n        console.log(img.ariaValueText);\r\n        if (img.ariaValueText !== null) {\r\n            userObj['imgUrl'] = img.ariaValueText;\r\n        }\r\n    });\r\n});\r\n\r\n//Get userinputs from register-form\r\nconst registerForm = document.querySelector('#register-form') as HTMLFormElement;\r\nregisterForm.addEventListener('submit', e => {\r\n    e.preventDefault();\r\n    document.querySelectorAll('input').forEach(input => {\r\n        if (input.value !== null && input.value !== '') {\r\n            userObj[input.name] = input.value;\r\n        }\r\n    });\r\n\r\n    registerHandler(userObj);\r\n});\r\n\r\n\r\n//Check if user exists in db\r\nasync function registerHandler(userObj: UserInput) {\r\n    const found: boolean = await findUserInDb(userObj);\r\n    if (!found) {\r\n        const user: User = createNewUser(userObj);\r\n        addUserToDb(user);\r\n\r\n        //Add animation? \r\n        setTimeout(() => {\r\n            location.replace('/src/index.html');\r\n        }, 1000);\r\n    } else {\r\n        //Prompt message to user\r\n        console.log('User already exists');\r\n    }\r\n}\r\n\r\nfunction createNewUser(userObj: UserInput) {\r\n    const user = new User(userObj.name, userObj.email, userObj.password, userObj.imgUrl);\r\n    console.log(user);\r\n    return user;\r\n}"],"names":["$4e047e17ea7f5722$export$1f44aaf2ec115b54","constructor","name","email","password","imgUrl","posts","getName","this","getEmail","getPassword","getImgUrl","async","$14f6629ccf7de9b8$export$31fab651fc2b928c","userObj","users","userFound","console","log","user","$14f6629ccf7de9b8$var$validateUser","$14f6629ccf7de9b8$var$getAllUsers","response","fetch","json","$14f6629ccf7de9b8$export$e13b0b8487db8de","index","length","url","init","method","body","JSON","stringify","headers","data","$f4150c8357e710ec$var$userObj","document","querySelectorAll","forEach","img","addEventListener","ariaValueText","querySelector","e","preventDefault","input","value","$f4150c8357e710ec$var$createNewUser","setTimeout","location","replace","$f4150c8357e710ec$var$registerHandler"],"version":3,"file":"createAccount.76155f65.js.map"}